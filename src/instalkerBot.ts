
import * as TelegramBot from 'node-telegram-bot-api';
import { STORE__TELEGRAM__USER ,STORE_INSTAGRAM_USER , STORE_FOLLOWINGS , TRACK_USERS , CHECK_USER_CONNECTION ,CHANGE_TARGET, StoreInstaUserResult, ChangeTargetResult} from './userManagement'
import { initializePuppeteer , GET_INITIAL_FOLLOWINGS } from './instagramUtils'


interface TelegramError extends Error {
  code?: string;
  response?: any;
  description?: string;
}


export interface TelegramBot {
  sendMessage(chatId: number | string, text: string, options?: object): Promise<Message>;
  onText(regex: RegExp, callback: (msg: Message, match: RegExpExecArray | null) => void): void;
  on(event: 'message' | 'polling_error' | 'callback_query' | string, callback: (msg: Message | TelegramError) => void): void;
  once(event: 'message' | 'polling_error' | 'callback_query' | string, callback: (msg: Message | TelegramError) => void): void;
    stopPolling(): Promise<void>;
    startPolling(): Promise<void>;
}

interface User {
  id: number;
  username?: string;
}

interface Chat {
  id: number;
}

interface Message {
  chatId: number;
  from?: User;
  text?: string;
  chat: Chat;

}


const token = '6856388742:AAGJvr7BjQlgZaIcLLhxtgumgWoXp6VZXQk';
const bot : TelegramBot= new TelegramBot(token, { polling: true });
TRACK_USERS(bot);

bot.onText(/\/start/, async (msg : Message) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const isConnected = await CHECK_USER_CONNECTION(userId); 
  
    const welcomeMessage = `–¶–µ —á–∞—Ç-–±–æ—Ç InstalkerüéÄ
  
    –©–æ –¥–∞—î —Ü–µ–π –±–æ—Ç?
    
    ‚≠êÔ∏è–í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤:
    –í—ñ–¥—Å—Ç–µ–∂—É–π—Ç–µ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –±—É–¥—å-—è–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Instagram.
    
    ‚≠êÔ∏è–û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:
    –û—Ç—Ä–∏–º—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –∫–æ–ª–∏ –æ–±—Ä–∞–Ω–∏–π –≤–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏—Ö –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤.`;
    
    const options = {
      reply_markup: {
        keyboard: [
          ['/continue']
        ],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    };
    const warningMessage = "–§—É–Ω–∫—Ü—ñ—è —É–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞. –Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /change";
  
    if (!isConnected) {
      bot.sendMessage(chatId, welcomeMessage, options);
    } else {
      bot.sendMessage(chatId, warningMessage);
    }
  })

  bot.onText(/\/continue/, (msg : Message) => {
    const chatId = msg.chat.id;
    const options = {
      reply_markup: {
        keyboard: [
          ['–¢–∞–∫'],
          ['–ù—ñ']
        ],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    };
  
    const processionWarning = `–ü–µ—Ä—à –Ω—ñ–∂ –º–∏ –ø–æ—á–Ω–µ–º–æ, —á–∏ –∑–≥–æ–¥–Ω—ñ –≤–∏ –Ω–∞ –æ–±—Ä–æ–±–∫—É 
    –≤–∞—à–æ–≥–æ Telegram ID —Ç–∞ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ü—å–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É? [–¢–∞–∫/–ù—ñ].`
    bot.sendMessage(chatId, processionWarning, options);
  });

  async function handleInstagramUsername(msg : Message , instagramUsername : string = "")  {
  const chatId : number= msg.chat.id;
  const telegramId : number = msg.from.id;
  const telegramUsername : string = msg.from.username.toString();

  try {
    await bot.sendMessage(chatId, "–ó–∞—á–µ–∫–∞–π—Ç–µ —Ç—Ä—ñ—à–∫–∏! –ô–¥–µ –ø–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
    const storedUser :StoreInstaUserResult  = await STORE_INSTAGRAM_USER(telegramId, instagramUsername);
    switch (storedUser.status) {
      case "success":
        const instagram_id = storedUser.instagram_id;
        await bot.sendMessage(chatId, storedUser.message);

        const usernames = await GET_INITIAL_FOLLOWINGS(instagram_id);
        await STORE_FOLLOWINGS(telegramUsername, telegramId, instagramUsername, instagram_id, usernames);

        await bot.sendMessage(chatId, "–§—É–Ω–∫—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞ , –æ—á—ñ–∫—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—èüéÄ");
        break;
      
      case "inaccessible":
      case "fail":
        await bot.sendMessage(chatId, storedUser.message);
        break;
      
      default:
        bot.sendMessage("–°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –≤ —Å–∏—Å—Ç–µ–º—ñ!–ë—É–¥—å –ª–∞—Å–∫–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ —Ç–µ—Ö–Ω—ñ—á–Ω—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É");

    }


  } catch (error) {
    if (error.message.includes("User not found")) {
      await bot.sendMessage(chatId, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á Instagram –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ /find —É –º–µ–Ω—é");
    } else {
      await bot.sendMessage(chatId, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ /find —É –º–µ–Ω—é");
      console.error(error);
    }
  }
}
bot.onText(/–¢–∞–∫/, (msg : Message) => {
  const telegramId : number = msg.from.id;
  const telegramUsername : string = msg.from.username;
  STORE__TELEGRAM__USER(telegramId, telegramUsername);
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "üîç –ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω—ñ–∫–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Instagram:");
  bot.once('text', async (msg : Message)  => { 
    const instagramUsername = msg.text;
    await handleInstagramUsername(msg, instagramUsername);
  });
});


bot.onText(/–ù—ñ/, (msg : Message) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "–í–∞—à—ñ –¥–∞–Ω—ñ –Ω–µ –±—É–¥—É—Ç—å –æ–±—Ä–æ–±–ª—è—Ç–∏—Å—è. –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ, –æ–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /continue –≤ –º–µ–Ω—é");
});

bot.onText(/\/find/, async (msg : Message) => {
  const userId = msg.from.id;
  if (msg.text && !msg.text.startsWith('/')) {
    const instagramUsername = msg.text;
    await handleInstagramUsername(msg, instagramUsername);
  } else {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω—ñ–∫–Ω–µ–π–º Instagram.");
  }
});


bot.onText(/\/change/, async (msg : Message) => {
  let chatId = msg.chat.id;
  const telegramId : number = msg.from.id;
  const telegramUsername : string = msg.from.username;
    bot.sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω—ñ–∫–Ω–µ–π–º –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
    bot.once('text', async (msg : Message) => { 
      chatId = msg.chat.id;
      const instagramUsername = msg.text;
      const result: ChangeTargetResult = await CHANGE_TARGET(telegramId);
      if (result.status === 'success') {
        await handleInstagramUsername(msg, instagramUsername);
        await bot.sendMessage(chatId, result.message);
      } 
    else {
      bot.sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω—ñ–∫–Ω–µ–π–º Instagram.");
    }
    });

   
    
});

function alertAdmin(error: TelegramError) {
  const adminChatId = 'YOUR_ADMIN_CHAT_ID';
  const errorMessage = `–ü–æ–º–∏–ª–∫–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è: ${error.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}\n–ö–æ–¥: ${error.code || '–ù/–î'}`;
  bot.sendMessage(adminChatId, errorMessage);
}

let retryCount = 0;
const maxRetries = 5;
const retryDelay = 5000; 

bot.on('polling_error', (error: Message | TelegramError) => {
  if (error instanceof Error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è:', error.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');
    if (error.code) {
      console.error('–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏:', error.code);
    }
    if ('stack' in error) {
      console.error('–°—Ç–µ–∫ –ø–æ–º–∏–ª–∫–∏:', error.stack);
    }
    alertAdmin(error);

    if (retryCount < maxRetries) {
      console.log(`–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${retryDelay / 1000} —Å–µ–∫—É–Ω–¥... (–°–ø—Ä–æ–±–∞ ${retryCount + 1}/${maxRetries})`);
      setTimeout(() => {
        retryCount++;
        bot.stopPolling()
          .then(() => bot.startPolling())
          .catch(err => console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è:', err.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'));
      }, retryDelay);
    } else {
      console.error('–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º—É —Å–ø—Ä–æ–±. –í–∏–º–∫–Ω–µ–Ω–Ω—è.');
      alertAdmin(new Error('–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º—É —Å–ø—Ä–æ–±. –í–∏–º–∫–Ω–µ–Ω–Ω—è –±–æ—Ç–∞.'));
      bot.stopPolling();
      process.exit(1); 

    }
  }
});
initializePuppeteer();

